{
  "name": "grunt-mustache-render",
  "description": "Render mustache templates",
  "version": "1.7.0",
  "homepage": "http://projects.the5thwall.net/mustache-render",
  "author": {
    "name": "Andy Arminio",
    "email": "5thWall@gmail.com",
    "url": "http://blog.the5thwall.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/5thWall/mustache-render.git"
  },
  "bugs": {
    "url": "https://github.com/5thWall/mustache-render/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/5thWall/mustache-render/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt": "^0.4.5"
  },
  "peerDependencies": {
    "grunt": "^0.4.5"
  },
  "dependencies": {
    "es6-promise": "^2.0.0",
    "js-yaml": "^3.2.2",
    "mustache": "^0.8.2",
    "request": "^2.45.0"
  },
  "keywords": [
    "gruntplugin",
    "mustache"
  ],
  "readme": "# grunt-mustache-render v1.7.0\n\n[![Build Status](https://travis-ci.org/5thWall/mustache-render.png?branch=master)](https://travis-ci.org/5thWall/mustache-render)\n[![NPM version](https://badge.fury.io/js/grunt-mustache-render.png)](http://badge.fury.io/js/grunt-mustache-render)\n\nThis is a grunt plugin to render [mustache](http://mustache.github.io/) templates. It takes data in `JSON`, `YAML`, or `POJO` (Plain Ol' JavaScript Object) format. It allows you to specify a folder for partials, instead of needing to list them individually.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-mustache-render --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-mustache-render');\n```\n\n## The \"mustache_render\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `mustache_render` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  mustache_render: {\n    options: {\n      // Task global options go here\n    },\n    your_target: {\n      options: {\n        // Target specific options go here\n      },\n      files : [\n        {\n          data: // Path or URL to JSON or YAML file, or POJO\n          template: // Path or URL to template file\n          dest: // Path to output destination here\n        }\n      ]\n    },\n  },\n})\n```\n**Note:** The `files` parameter _must_ be an array, and _must_ conform to the format specified above. Each object in the file array represents _one_ rendered template. Data files can be in either `JSON` or `YAML` format or as a `POJO` (Plain Ol' JavaScript Object).\n\n#### Building Long File Lists\n\nIf you want to build out a long list for the `files` array, perhaps dynamically as described by [building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically), you may use either `data` *or* `template` as the source (`src`) value as long as you specify the other one by its normal name. See below for some examples.\n\n#### Examples:\n\n```js\nfiles: [\n  {data: \"path/to/data/file.json\",\n   template: \"path/to/template.mustache\",\n   dest: \"file/to/output.html\"},\n  {data: \"http://api.example.com/file.json\",\n   template: \"http://docs.example.com/report.mustache\",\n   dest: \"file/to/output.html\"}\n]\n```\n\n```js\nfiles: [\n  {data: { greeting: \"Hello\", target: \"world\" },\n   template: \"path/to/template.mustache\",\n   dest: \"file/to/output.html\"},\n  {data: { greeting: \"Hola\", target: \"mundo\" },\n   template: \"http://docs.example.com/report.mustache\",\n   dest: \"file/to/output.html\"}\n]\n```\n\n```js\noptions: {template: 'common-template.mustache'},\nfiles: {\n  'file/to/output-1.html': 'data/to/read-1.json',\n  'file/to/output-2.html': 'data/to/read-2.json',\n  'file/to/output-3.html': 'data/to/read-3.json'\n}\n```\n\n```js\nfiles: [\n  {expand: true,\n   src: 'data/to/read-*.json',\n   template: 'common-template.mustache',\n   dest: 'dest/directory/'}\n]\n```\n\n```js\noptions: {data: 'common-data.json'},\nfiles: {\n  'file/to/output-1.html': 'template/to/read-1.mustache',\n  'file/to/output-2.html': 'template/to/read-2.mustache',\n  'file/to/output-3.html': 'template/to/read-3.mustache'\n}\n```\n\n```js\nfiles: [\n  {expand: true,\n   src: 'template/to/read-*.mustache',\n   data: 'common-data.json',\n   dest: 'dest/directory/'}\n]\n```\n\n### Options\n\n#### options.directory\nType: `String`  \nDefault value: `\".\"` (i.e. relative to your `Gruntfile.js`)\n\nPath to the directory in which partials can be found. Partials are looked up by name in this directory.\n\n#### options.extension\nType: `String`  \nDefault value: `\".mustache\"`\n\n`mustache-render` will use this extension when looking up partials.\n\n#### options.prefix_file and options.prefix_dir\nType: `String`  \nDefault value: `\"\"`\n\n`mustache-render` will use these as common prefixes when looking up partials,\nwith `prefix_file` prepended onto the filename and `prefix_dir` prepended onto\nthe leading directory (if any). For example, given `prefix_file: 'part_'` and\n`prefix_dir: 'sub_'`, a partial reference for `a/hello` would search for a\nfile named `sub_a/part_hello.mustache`.\n\n*Note:* Versions 1.6 and earlier of the plug-in use an option called `prefix`,\nwhich prepended onto the partial reference, regardless of whether it included\na directory or not. This option is still supported for backward compatibility\nand maintains the same behavior.\n\n#### options.clear_cache\nType: `Boolean`  \nDefault value: `false`\n\nClears the mustache cache before running the target. Mustache will cache partials by name when running multiple tasks, so this option is usefull if `options.extension`, `options.directory`, or `options.prefix` have been changed between tasks.\n\n#### options.partial_finder\nType: `Function`  \nDefault value: `null`\n\nOverrides the default function for finding partials. The function will be passed the name of the partial as a parameter, and must return the text of the partial.\n\n```js\npartial_finder: function(name) {\n  return \"Hello, I am a partial with name: \" + name + \"\\n\";\n}\n```\n\n#### options.data and options.template\nType: anything normally accepted for a file  \nDefault value: `undefined`\n\nThese two slots can be used to fill in a default `data` or `template` value for any item in your `files` list that does not already have one specified.  This can be handy if you want to dynamically build the `files` list and apply the same `data` or `template` source to every item in the list.\n\n### options.escape\nType: `Boolean` or `Function`  \nDefault value: `true`\n\nBy default (`true`), mustache will escape special HTML characters unless explicitly disabled in the template body (e.g. by using triple mustaches, `{{{var}}}`).\n\nIf set to `false` it disables default HTML escaping. That means that `{{var}}` will not be escaped. This is useful for templating files that are not HTML.\n\nTo implement custom escape handling specific to your needs, you may instead pass a function that accepts and returns a string.\n\n### Usage Examples\n\nFor this Grunt config:\n\n```js\ngrunt.initConfig({\n  mustache_render: {\n    all: {\n      files: [{\n        data: \"data/hello_world.json\",\n        template: \"templates/hello_world.mustache\",\n        dest: \"public/hello_world.html\"\n      }]\n    }\n  }\n})\n```\n\nAnd this `json`:\n\n```js\n{\n  \"greeting\" : \"Hello\",\n  \"target\" : \"World\"\n}\n```\n\nThis template:\n\n```html\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>A greeting</title>\n</head>\n<body>\n  <h1>{{greeting}}, {{target}}!</h1>\n</body>\n</html>\n```\n\nWill produce this output:\n\n```html\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>A greeting</title>\n</head>\n<body>\n  <h1>Hello, World!</h1>\n</body>\n</html>\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-mustache-render@1.7.0",
  "dist": {
    "shasum": "4790fdbeee0f33a864ea874cd8d86b93ff3190ef"
  },
  "_from": "grunt-mustache-render@",
  "_resolved": "https://registry.npmjs.org/grunt-mustache-render/-/grunt-mustache-render-1.7.0.tgz"
}
